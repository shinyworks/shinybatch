% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_reactive_val.R
\name{BatchReactiveVal}
\alias{BatchReactiveVal}
\title{BatchReactiveVal R6 class}
\description{
An R6 class that encapsulates a standard \code{reactiveVal}. It
serves as the backend for \code{\link[=batch_reactive_val]{batch_reactive_val()}} and is managed by a
\link{BatchOrchestrator} object.
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BatchReactiveVal-new}{\code{BatchReactiveVal$new()}}
\item \href{#method-BatchReactiveVal-get}{\code{BatchReactiveVal$get()}}
\item \href{#method-BatchReactiveVal-get_rv_value}{\code{BatchReactiveVal$get_rv_value()}}
\item \href{#method-BatchReactiveVal-set}{\code{BatchReactiveVal$set()}}
\item \href{#method-BatchReactiveVal-set_rv_value}{\code{BatchReactiveVal$set_rv_value()}}
\item \href{#method-BatchReactiveVal-get_name}{\code{BatchReactiveVal$get_name()}}
\item \href{#method-BatchReactiveVal-get_orchestrator}{\code{BatchReactiveVal$get_orchestrator()}}
\item \href{#method-BatchReactiveVal-clone}{\code{BatchReactiveVal$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-new"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-new}{}}}
\subsection{Method \code{new()}}{
Initialize the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$new(
  name,
  value = NULL,
  orchestrator = batch_orchestrator(),
  validation_fun = NULL,
  call = rlang::caller_env()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(length-1 \code{character}) The unique name for this reactive
value.}

\item{\code{value}}{(various) The initial value.}

\item{\code{orchestrator}}{(\code{BatchOrchestrator} or \code{batch_reactive_val}) A
\code{BatchOrchestrator} object, or a \code{batch_reactive_val} that should be
included in the same batch. Defaults to creating a new
\code{\link[=batch_orchestrator]{batch_orchestrator()}}.}

\item{\code{validation_fun}}{(\code{function} or \code{NULL}) The validation function for
this value.}

\item{\code{call}}{(\code{environment}) The execution environment to use for error
messages.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-get"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-get}{}}}
\subsection{Method \code{get()}}{
Get the current value, blocking if a transaction is active.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$get(call = rlang::caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{call}}{(\code{environment}) The execution environment to use for error
messages.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The current, consistent value stored in the internal
\code{reactiveVal}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-get_rv_value"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-get_rv_value}{}}}
\subsection{Method \code{get_rv_value()}}{
Get the raw value of the internal reactiveVal.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$get_rv_value()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This is an unsafe getter intended for internal use by the
orchestrator only. It does not wait for transactions to complete.
}

\subsection{Returns}{
The current value stored in the internal \code{reactiveVal}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-set"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-set}{}}}
\subsection{Method \code{set()}}{
Request a new value for this reactive.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$set(value, call = rlang::caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(various) The new value to set.}

\item{\code{call}}{(\code{environment}) The execution environment to use for error
messages.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method initiates a transaction with the orchestrator.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-set_rv_value"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-set_rv_value}{}}}
\subsection{Method \code{set_rv_value()}}{
Set the raw value of the internal reactiveVal.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$set_rv_value(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(various) The new value to set.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This is an unsafe setter intended for internal use by the
orchestrator only. It does not trigger a validation cascade.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-get_name"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-get_name}{}}}
\subsection{Method \code{get_name()}}{
Get the name of the reactive value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$get_name()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(length-1 \code{character}) The name of the reactive value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-get_orchestrator"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-get_orchestrator}{}}}
\subsection{Method \code{get_orchestrator()}}{
Get the managing \link{BatchOrchestrator} instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$get_orchestrator()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(R6 \code{BatchOrchestrator}) The \link{BatchOrchestrator} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchReactiveVal-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BatchReactiveVal-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchReactiveVal$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
