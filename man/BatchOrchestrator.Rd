% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batchReactiveVal.R
\name{BatchOrchestrator}
\alias{BatchOrchestrator}
\title{BatchOrchestrator R6 class}
\description{
Manages a group of \link{BatchReactiveVal} objects, orchestrating
validation and ensuring that their values are updated together in a single
atomic transaction.
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BatchOrchestrator-new}{\code{BatchOrchestrator$new()}}
\item \href{#method-BatchOrchestrator-add_val}{\code{BatchOrchestrator$add_val()}}
\item \href{#method-BatchOrchestrator-is_in_transaction}{\code{BatchOrchestrator$is_in_transaction()}}
\item \href{#method-BatchOrchestrator-request_update}{\code{BatchOrchestrator$request_update()}}
\item \href{#method-BatchOrchestrator-clone}{\code{BatchOrchestrator$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchOrchestrator-new"></a>}}
\if{latex}{\out{\hypertarget{method-BatchOrchestrator-new}{}}}
\subsection{Method \code{new()}}{
Initialize the transaction manager.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchOrchestrator$new(validation_flow = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{validation_flow}}{(named \code{list} of \code{function}s) Each function takes
two arguments: \code{my_value} (the current or proposed value for the
reactive it is validating) and \code{all_values} (a named list of all other
values in the transaction), and returns a valid value. The order of
this list defines the order of the validation cascade. By default, this
list begins empty, and will be populated when values are added to this
batch.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchOrchestrator-add_val"></a>}}
\if{latex}{\out{\hypertarget{method-BatchOrchestrator-add_val}{}}}
\subsection{Method \code{add_val()}}{
Add a reactive value to be managed by this coordinator.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchOrchestrator$add_val(val, validation_fun = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{val}}{(\code{BatchReactiveVal}) The \link{BatchReactiveVal} object to add.}

\item{\code{validation_fun}}{(\code{function} or \code{NULL}) The validation function for
this value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchOrchestrator-is_in_transaction"></a>}}
\if{latex}{\out{\hypertarget{method-BatchOrchestrator-is_in_transaction}{}}}
\subsection{Method \code{is_in_transaction()}}{
Check if a transaction is currently active.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchOrchestrator$is_in_transaction()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(length-1 \code{logical}) \code{TRUE} if a transaction is in progress.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchOrchestrator-request_update"></a>}}
\if{latex}{\out{\hypertarget{method-BatchOrchestrator-request_update}{}}}
\subsection{Method \code{request_update()}}{
The main entry point for starting a state change.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchOrchestrator$request_update(trigger_name, proposed_value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{trigger_name}}{(length-1 \code{character}) The name of the reactive value
that initiated the change.}

\item{\code{proposed_value}}{(various) The new value proposed for the trigger.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BatchOrchestrator-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BatchOrchestrator-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BatchOrchestrator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
