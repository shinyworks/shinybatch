% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_reactive_val.R
\name{batch_reactive_val}
\alias{batch_reactive_val}
\title{Create a batch reactive value}
\usage{
batch_reactive_val(
  name,
  value = NULL,
  orchestrator = batch_orchestrator(),
  validation_fun = NULL
)
}
\arguments{
\item{name}{(length-1 \code{character}) A unique character string to identify this
reactive value within its batch.}

\item{value}{(various) The initial value.}

\item{orchestrator}{(\code{BatchOrchestrator} or \code{batch_reactive_val}) A
\code{BatchOrchestrator} object created by \code{\link[=batch_orchestrator]{batch_orchestrator()}}, or another
\code{batch_reactive_val} that is already part of the desired batch. Defaults to
creating a new, empty orchestrator.}

\item{validation_fun}{(\code{function} or \code{NULL}) An optional function that
defines the validation logic for this value. It must accept two arguments:
its own current or proposed value, and a named list of all proposed values
in the batch. The function must return the final, validated value based on
the other values (usually either the input value or a default value).}
}
\value{
A function that behaves like a \code{reactiveVal} but with transactional
guarantees, with class \code{batch_reactive_val}.
}
\description{
Creates a "smart" reactive value that coordinates with other reactive values
in a batch to ensure atomic, validated updates. This is useful for managing
interdependent inputs, like a set of cascading filters, where updating one
value should immediately cause others to be re-validated.
}
